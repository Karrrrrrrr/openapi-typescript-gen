{
  "openapi": "3.0.1",
  "info": {
    "title": "示例项目",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Core"
    },
    {
      "name": "User Information"
    },
    {
      "name": "Direct Messaging"
    },
    {
      "name": "Relationships"
    },
    {
      "name": "Bots"
    },
    {
      "name": "Messaging"
    },
    {
      "name": "Channel Information"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Channel Invites"
    },
    {
      "name": "Voice"
    },
    {
      "name": "Channel Permissions"
    },
    {
      "name": "Interactions"
    },
    {
      "name": "Webhooks"
    },
    {
      "name": "Server Information"
    },
    {
      "name": "Server Members"
    },
    {
      "name": "Server Permissions"
    },
    {
      "name": "Server Customisation"
    },
    {
      "name": "Invites"
    },
    {
      "name": "Emojis"
    },
    {
      "name": "User Safety"
    },
    {
      "name": "Account"
    },
    {
      "name": "Session"
    },
    {
      "name": "MFA"
    },
    {
      "name": "Onboarding"
    },
    {
      "name": "Web Push"
    },
    {
      "name": "Sync"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Query Node",
        "deprecated": false,
        "description": "Fetch the server configuration for this Revolt instance.",
        "operationId": "root_root",
        "tags": [
          "Core"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevoltConfig"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/@me": {
      "get": {
        "summary": "Fetch Self",
        "deprecated": false,
        "description": "Retrieve your user information.",
        "operationId": "fetch_self_fetch",
        "tags": [
          "User Information"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}": {
      "get": {
        "summary": "Fetch User",
        "deprecated": false,
        "description": "Retrieve a user's information.",
        "operationId": "fetch_user_fetch",
        "tags": [
          "User Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit User",
        "deprecated": false,
        "description": "Edit currently authenticated user.",
        "operationId": "edit_user_edit",
        "tags": [
          "User Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditUser"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/flags": {
      "get": {
        "summary": "Fetch User Flags",
        "deprecated": false,
        "description": "Retrieve a user's flags.",
        "operationId": "fetch_user_flags_fetch_user_flags",
        "tags": [
          "User Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlagResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/@me/username": {
      "patch": {
        "summary": "Change Username",
        "deprecated": false,
        "description": "Change your username.",
        "operationId": "change_username_change_username",
        "tags": [
          "User Information"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataChangeUsername"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/default_avatar": {
      "get": {
        "summary": "Fetch Default Avatar",
        "deprecated": false,
        "description": "This returns a default avatar based on the given id.",
        "operationId": "get_default_avatar_default_avatar",
        "tags": [
          "User Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default Avatar Picture",
            "content": {
              "image/png": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/profile": {
      "get": {
        "summary": "Fetch User Profile",
        "deprecated": false,
        "description": "Retrieve a user's profile data.\n\nWill fail if you do not have permission to access the other user's profile.",
        "operationId": "fetch_profile_profile",
        "tags": [
          "User Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/dms": {
      "get": {
        "summary": "Fetch Direct Message Channels",
        "deprecated": false,
        "description": "This fetches your direct messages, including any DM and group DM conversations.",
        "operationId": "fetch_dms_direct_messages",
        "tags": [
          "Direct Messaging"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Channel"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/dm": {
      "get": {
        "summary": "Open Direct Message",
        "deprecated": false,
        "description": "Open a DM with another user.\n\nIf the target is oneself, a saved messages channel is returned.",
        "operationId": "open_dm_open_dm",
        "tags": [
          "Direct Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/mutual": {
      "get": {
        "summary": "Fetch Mutual Friends And Servers",
        "deprecated": false,
        "description": "Retrieve a list of mutual friends and servers with another user.",
        "operationId": "find_mutual_mutual",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MutualResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/friend": {
      "put": {
        "summary": "Accept Friend Request",
        "deprecated": false,
        "description": "Accept another user's friend request.",
        "operationId": "add_friend_add",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Deny Friend Request / Remove Friend",
        "deprecated": false,
        "description": "Denies another user's friend request or removes an existing friend.",
        "operationId": "remove_friend_remove",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{target}/block": {
      "put": {
        "summary": "Block User",
        "deprecated": false,
        "description": "Block another user by their id.",
        "operationId": "block_user_block",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Unblock User",
        "deprecated": false,
        "description": "Unblock another user by their id.",
        "operationId": "unblock_user_unblock",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/friend": {
      "post": {
        "summary": "Send Friend Request",
        "deprecated": false,
        "description": "Send a friend request to another user.",
        "operationId": "send_friend_request_send_friend_request",
        "tags": [
          "Relationships"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSendFriendRequest"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/bots/create": {
      "post": {
        "summary": "Create Bot",
        "deprecated": false,
        "description": "Create a new Revolt bot.",
        "operationId": "create_create_bot",
        "tags": [
          "Bots"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateBot"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotWithUserResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/bots/{target}/invite": {
      "get": {
        "summary": "Fetch Public Bot",
        "deprecated": false,
        "description": "Fetch details of a public (or owned) bot by its id.",
        "operationId": "fetch_public_fetch_public_bot",
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicBot"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "Invite Bot",
        "deprecated": false,
        "description": "Invite a bot to a server or group by its id.`",
        "operationId": "invite_invite_bot",
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteBotDestination"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/bots/{bot}": {
      "get": {
        "summary": "Fetch Bot",
        "deprecated": false,
        "description": "Fetch details of a bot you own by its id.",
        "operationId": "fetch_fetch_bot",
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "bot",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchBotResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/bots/@me": {
      "get": {
        "summary": "Fetch Owned Bots",
        "deprecated": false,
        "description": "Fetch all of the bots that you have control over.",
        "operationId": "fetch_owned_fetch_owned_bots",
        "tags": [
          "Bots"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnedBotsResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/bots/{target}": {
      "delete": {
        "summary": "Delete Bot",
        "deprecated": false,
        "description": "Delete a bot by its id.",
        "operationId": "delete_delete_bot",
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit Bot",
        "deprecated": false,
        "description": "Edit bot details by its id.",
        "operationId": "edit_edit_bot",
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditBot"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotWithUserResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/ack/{message}": {
      "put": {
        "summary": "Acknowledge Message",
        "deprecated": false,
        "description": "Lets the server and all other clients know that we've seen this message id in this channel.",
        "operationId": "channel_ack_ack",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "message",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/messages": {
      "get": {
        "summary": "Fetch Messages",
        "deprecated": false,
        "description": "Fetch multiple messages.",
        "operationId": "message_query_query",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of messages to fetch\n\nFor fetching nearby messages, this is \\`(limit + 2)\\`.",
            "required": false,
            "schema": {
              "description": "Maximum number of messages to fetch\n\nFor fetching nearby messages, this is \\`(limit + 2)\\`.",
              "type": "integer",
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "nullable": true
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Message id before which messages should be fetched",
            "required": false,
            "schema": {
              "description": "Message id before which messages should be fetched",
              "type": "string",
              "maxLength": 26,
              "minLength": 26,
              "nullable": true
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Message id after which messages should be fetched",
            "required": false,
            "schema": {
              "description": "Message id after which messages should be fetched",
              "type": "string",
              "maxLength": 26,
              "minLength": 26,
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Message sort direction",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "Message sort direction",
                  "$ref": "#/components/schemas/MessageSort"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "name": "nearby",
            "in": "query",
            "description": "Message id to search around\n\nSpecifying 'nearby' ignores 'before', 'after' and 'sort'. It will also take half of limit rounded as the limits to each side. It also fetches the message ID specified.",
            "required": false,
            "schema": {
              "description": "Message id to search around\n\nSpecifying 'nearby' ignores 'before', 'after' and 'sort'. It will also take half of limit rounded as the limits to each side. It also fetches the message ID specified.",
              "type": "string",
              "maxLength": 26,
              "minLength": 26,
              "nullable": true
            }
          },
          {
            "name": "include_users",
            "in": "query",
            "description": "Whether to include user (and member, if server channel) objects",
            "required": false,
            "schema": {
              "description": "Whether to include user (and member, if server channel) objects",
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkMessageResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "Send Message",
        "deprecated": false,
        "description": "Sends a message to the given channel.",
        "operationId": "message_send_message_send",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key to prevent duplicate requests",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataMessageSend"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/search": {
      "post": {
        "summary": "Search for Messages",
        "deprecated": false,
        "description": "This route searches for messages within the given parameters.",
        "operationId": "message_search_search",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataMessageSearch"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkMessageResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/messages/{msg}/pin": {
      "post": {
        "summary": "Pins a message",
        "deprecated": false,
        "description": "Pins a message by its id.",
        "operationId": "message_pin_message_pin",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Unpins a message",
        "deprecated": false,
        "description": "Unpins a message by its id.",
        "operationId": "message_unpin_message_unpin",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/messages/{msg}": {
      "get": {
        "summary": "Fetch Message",
        "deprecated": false,
        "description": "Retrieves a message by its id.",
        "operationId": "message_fetch_fetch",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete Message",
        "deprecated": false,
        "description": "Delete a message you've sent or one you have permission to delete.",
        "operationId": "message_delete_delete",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit Message",
        "deprecated": false,
        "description": "Edits a message that you've previously sent.",
        "operationId": "message_edit_edit",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditMessage"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/messages/bulk": {
      "delete": {
        "summary": "Bulk Delete Messages",
        "deprecated": false,
        "description": "Delete multiple messages you've sent or one you have permission to delete.\n\nThis will always require `ManageMessages` permission regardless of whether you own the message or not.\n\nMessages must have been sent within the past 1 week.",
        "operationId": "message_bulk_delete_bulk_delete_messages",
        "tags": [
          "Messaging"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptionsBulkDelete"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}": {
      "get": {
        "summary": "Fetch Channel",
        "deprecated": false,
        "description": "Fetch channel by its id.",
        "operationId": "channel_fetch_fetch",
        "tags": [
          "Channel Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Close Channel",
        "deprecated": false,
        "description": "Deletes a server channel, leaves a group or closes a group.",
        "operationId": "channel_delete_delete",
        "tags": [
          "Channel Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "leave_silently",
            "in": "query",
            "description": "Whether to not send a leave message",
            "required": false,
            "schema": {
              "description": "Whether to not send a leave message",
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit Channel",
        "deprecated": false,
        "description": "Edit a channel object by its id.",
        "operationId": "channel_edit_edit",
        "tags": [
          "Channel Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditChannel"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/members": {
      "get": {
        "summary": "Fetch Group Members",
        "deprecated": false,
        "description": "Retrieves all users who are part of this group.\n\nThis may not return full user information if users are not friends but have mutual connections.",
        "operationId": "members_fetch_fetch_members",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/create": {
      "post": {
        "summary": "Create Group",
        "deprecated": false,
        "description": "Create a new group channel.",
        "operationId": "group_create_create_group",
        "tags": [
          "Groups"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateGroup"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{group_id}/recipients/{member_id}": {
      "put": {
        "summary": "Add Member to Group",
        "deprecated": false,
        "description": "Adds another user to the group.",
        "operationId": "group_add_member_add_member",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "member_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/recipients/{member}": {
      "delete": {
        "summary": "Remove Member from Group",
        "deprecated": false,
        "description": "Removes a user from the group.",
        "operationId": "group_remove_member_remove_member",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "member",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/invites": {
      "post": {
        "summary": "Create Invite",
        "deprecated": false,
        "description": "Creates an invite to this channel.\n\nChannel must be a `TextChannel`.",
        "operationId": "invite_create_create_invite",
        "tags": [
          "Channel Invites"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/join_call": {
      "post": {
        "summary": "Join Call",
        "deprecated": false,
        "description": "Asks the voice server for a token to join the call.",
        "operationId": "voice_join_call",
        "tags": [
          "Voice"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyCreateVoiceUserResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/permissions/{role_id}": {
      "put": {
        "summary": "Set Role Permission",
        "deprecated": false,
        "description": "Sets permissions for the specified role in this channel.\n\nChannel must be a `TextChannel` or `VoiceChannel`.",
        "operationId": "permissions_set_set_role_permissions",
        "tags": [
          "Channel Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSetRolePermissions"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/permissions/default": {
      "put": {
        "summary": "Set Default Permission",
        "deprecated": false,
        "description": "Sets permissions for the default role in this channel.\n\nChannel must be a `Group`, `TextChannel` or `VoiceChannel`.",
        "operationId": "permissions_set_default_set_default_permissions",
        "tags": [
          "Channel Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataDefaultChannelPermissions"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/messages/{msg}/reactions/{emoji}": {
      "put": {
        "summary": "Add Reaction to Message",
        "deprecated": false,
        "description": "React to a given message.",
        "operationId": "message_react_react_message",
        "tags": [
          "Interactions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "emoji",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Remove Reaction(s) to Message",
        "deprecated": false,
        "description": "Remove your own, someone else's or all of a given reaction.\n\nRequires `ManageMessages` if changing others' reactions.",
        "operationId": "message_unreact_unreact_message",
        "tags": [
          "Interactions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "emoji",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Remove a specific user's reaction",
            "required": false,
            "schema": {
              "description": "Remove a specific user's reaction",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "remove_all",
            "in": "query",
            "description": "Remove all reactions",
            "required": false,
            "schema": {
              "description": "Remove all reactions",
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/messages/{msg}/reactions": {
      "delete": {
        "summary": "Remove All Reactions from Message",
        "deprecated": false,
        "description": "Remove your own, someone else's or all of a given reaction.\n\nRequires `ManageMessages` permission.",
        "operationId": "message_clear_reactions_clear_reactions",
        "tags": [
          "Interactions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "msg",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{target}/webhooks": {
      "post": {
        "summary": "Creates a webhook",
        "deprecated": false,
        "description": "Creates a webhook which 3rd party platforms can use to send messages",
        "operationId": "webhook_create_create_webhook",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookBody"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/channels/{channel_id}/webhooks": {
      "get": {
        "summary": "Gets all webhooks",
        "deprecated": false,
        "description": "Gets all webhooks inside the channel",
        "operationId": "webhook_fetch_all_fetch_webhooks",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "channel_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/webhooks/{webhook_id}/{token}": {
      "get": {
        "summary": "Gets a webhook",
        "deprecated": false,
        "description": "Gets a webhook with a token",
        "operationId": "webhook_fetch_token_webhook_fetch_token",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "Executes a webhook",
        "deprecated": false,
        "description": "Executes a webhook and sends a message",
        "operationId": "webhook_execute_webhook_execute",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key to prevent duplicate requests",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataMessageSend"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Deletes a webhook",
        "deprecated": false,
        "description": "Deletes a webhook with a token",
        "operationId": "webhook_delete_token_webhook_delete_token",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edits a webhook",
        "deprecated": false,
        "description": "Edits a webhook with a token",
        "operationId": "webhook_edit_token_webhook_edit_token",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditWebhook"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/webhooks/{webhook_id}": {
      "get": {
        "summary": "Gets a webhook",
        "deprecated": false,
        "description": "Gets a webhook",
        "operationId": "webhook_fetch_webhook_fetch",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWebhook"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Deletes a webhook",
        "deprecated": false,
        "description": "Deletes a webhook",
        "operationId": "webhook_delete_webhook_delete",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edits a webhook",
        "deprecated": false,
        "description": "Edits a webhook",
        "operationId": "webhook_edit_webhook_edit",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditWebhook"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/webhooks/{webhook_id}/{token}/github": {
      "post": {
        "summary": "Executes a webhook specific to github",
        "deprecated": false,
        "description": "Executes a webhook specific to github and sends a message containing the relevant info about the event",
        "operationId": "webhook_execute_github_webhook_execute_github",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "description": "The name of the github event",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/create": {
      "post": {
        "summary": "Create Server",
        "deprecated": false,
        "description": "Create a new server.",
        "operationId": "server_create_create_server",
        "tags": [
          "Server Information"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateServer"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServerLegacyResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}": {
      "get": {
        "summary": "Fetch Server",
        "deprecated": false,
        "description": "Fetch a server by its id.",
        "operationId": "server_fetch_fetch",
        "tags": [
          "Server Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "include_channels",
            "in": "query",
            "description": "Whether to include channels",
            "required": false,
            "schema": {
              "description": "Whether to include channels",
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchServerResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete / Leave Server",
        "deprecated": false,
        "description": "Deletes a server if owner otherwise leaves.",
        "operationId": "server_delete_delete",
        "tags": [
          "Server Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "leave_silently",
            "in": "query",
            "description": "Whether to not send a leave message",
            "required": false,
            "schema": {
              "description": "Whether to not send a leave message",
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit Server",
        "deprecated": false,
        "description": "Edit a server by its id.",
        "operationId": "server_edit_edit",
        "tags": [
          "Server Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditServer"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/ack": {
      "put": {
        "summary": "Mark Server As Read",
        "deprecated": false,
        "description": "Mark all channels in a server as read.",
        "operationId": "server_ack_ack",
        "tags": [
          "Server Information"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{server}/channels": {
      "post": {
        "summary": "Create Channel",
        "deprecated": false,
        "description": "Create a new Text or Voice channel.",
        "operationId": "channel_create_create_server_channel",
        "tags": [
          "Server Information"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateServerChannel"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/members": {
      "get": {
        "summary": "Fetch Members",
        "deprecated": false,
        "description": "Fetch all server members.",
        "operationId": "member_fetch_all_fetch_all",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "exclude_offline",
            "in": "query",
            "description": "Whether to exclude offline users",
            "required": false,
            "schema": {
              "description": "Whether to exclude offline users",
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMemberResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/members/{member}": {
      "get": {
        "summary": "Fetch Member",
        "deprecated": false,
        "description": "Retrieve a member.",
        "operationId": "member_fetch_fetch",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "member",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Kick Member",
        "deprecated": false,
        "description": "Removes a member from the server.",
        "operationId": "member_remove_kick",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "member",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{server}/members/{member}": {
      "patch": {
        "summary": "Edit Member",
        "deprecated": false,
        "description": "Edit a member by their id.",
        "operationId": "member_edit_edit",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "member",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataMemberEdit"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/members_experimental_query": {
      "get": {
        "summary": "Query members by name",
        "deprecated": false,
        "description": "Query members by a given name, this API is not stable and will be removed in the future.",
        "operationId": "member_experimental_query_member_experimental_query",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "String to search for",
            "required": true,
            "schema": {
              "description": "String to search for",
              "type": "string"
            }
          },
          {
            "name": "experimental_api",
            "in": "query",
            "description": "Discourage use of this API",
            "required": true,
            "schema": {
              "description": "Discourage use of this API",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberQueryResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{server}/bans/{target}": {
      "put": {
        "summary": "Ban User",
        "deprecated": false,
        "description": "Ban a user by their id.",
        "operationId": "ban_create_ban",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBanCreate"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerBan"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Unban user",
        "deprecated": false,
        "description": "Remove a user's ban.",
        "operationId": "ban_remove_unban",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/bans": {
      "get": {
        "summary": "Fetch Bans",
        "deprecated": false,
        "description": "Fetch all bans on a server.",
        "operationId": "ban_list_list",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BanListResult"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/invites": {
      "get": {
        "summary": "Fetch Invites",
        "deprecated": false,
        "description": "Fetch all server invites.",
        "operationId": "invites_fetch_invites",
        "tags": [
          "Server Members"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/roles": {
      "post": {
        "summary": "Create Role",
        "deprecated": false,
        "description": "Creates a new server role.",
        "operationId": "roles_create_create",
        "tags": [
          "Server Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateRole"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewRoleResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/roles/{role_id}": {
      "get": {
        "summary": "Fetch Role",
        "deprecated": false,
        "description": "Fetch a role by its id.",
        "operationId": "roles_fetch_fetch",
        "tags": [
          "Server Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete Role",
        "deprecated": false,
        "description": "Delete a server role by its id.",
        "operationId": "roles_delete_delete",
        "tags": [
          "Server Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit Role",
        "deprecated": false,
        "description": "Edit a role by its id.",
        "operationId": "roles_edit_edit",
        "tags": [
          "Server Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditRole"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/permissions/{role_id}": {
      "put": {
        "summary": "Set Role Permission",
        "deprecated": false,
        "description": "Sets permissions for the specified role in the server.",
        "operationId": "permissions_set_set_role_permission",
        "tags": [
          "Server Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSetServerRolePermission"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/permissions/default": {
      "put": {
        "summary": "Set Default Permission",
        "deprecated": false,
        "description": "Sets permissions for the default role in this server.",
        "operationId": "permissions_set_default_set_default_permissions",
        "tags": [
          "Server Permissions"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataPermissionsValue"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/servers/{target}/emojis": {
      "get": {
        "summary": "Fetch Server Emoji",
        "deprecated": false,
        "description": "Fetch all emoji on a server.",
        "operationId": "emoji_list_list_emoji",
        "tags": [
          "Server Customisation"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Emoji"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/invites/{target}": {
      "get": {
        "summary": "Fetch Invite",
        "deprecated": false,
        "description": "Fetch an invite by its id.",
        "operationId": "invite_fetch_fetch",
        "tags": [
          "Invites"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "Join Invite",
        "deprecated": false,
        "description": "Join an invite by its ID",
        "operationId": "invite_join_join",
        "tags": [
          "Invites"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteJoinResponse"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete Invite",
        "deprecated": false,
        "description": "Delete an invite by its id.",
        "operationId": "invite_delete_delete",
        "tags": [
          "Invites"
        ],
        "parameters": [
          {
            "name": "target",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/custom/emoji/{id}": {
      "put": {
        "summary": "Create New Emoji",
        "deprecated": false,
        "description": "Create an emoji by its Autumn upload id.",
        "operationId": "emoji_create_create_emoji",
        "tags": [
          "Emojis"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateEmoji"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Emoji"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/custom/emoji/{emoji_id}": {
      "get": {
        "summary": "Fetch Emoji",
        "deprecated": false,
        "description": "Fetch an emoji by its id.",
        "operationId": "emoji_fetch_fetch_emoji",
        "tags": [
          "Emojis"
        ],
        "parameters": [
          {
            "name": "emoji_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Emoji"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete Emoji",
        "deprecated": false,
        "description": "Delete an emoji by its id.",
        "operationId": "emoji_delete_delete_emoji",
        "tags": [
          "Emojis"
        ],
        "parameters": [
          {
            "name": "emoji_id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/safety/report": {
      "post": {
        "summary": "Report Content",
        "deprecated": false,
        "description": "Report a piece of content to the moderation team.",
        "operationId": "report_content_report_content",
        "tags": [
          "User Safety"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataReportContent"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/create": {
      "post": {
        "summary": "Create Account",
        "deprecated": false,
        "description": "Create a new account.",
        "operationId": "create_account_create_account",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCreateAccount"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/reverify": {
      "post": {
        "summary": "Resend Verification",
        "deprecated": false,
        "description": "Resend account creation verification email.",
        "operationId": "resend_verification_resend_verification",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataResendVerification"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/delete": {
      "put": {
        "summary": "Confirm Account Deletion",
        "deprecated": false,
        "description": "Schedule an account for deletion by confirming the received token.",
        "operationId": "confirm_deletion_confirm_deletion",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataAccountDeletion"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "Delete Account",
        "deprecated": false,
        "description": "Request to have an account deleted.",
        "operationId": "delete_account_delete_account",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/": {
      "get": {
        "summary": "Fetch Account",
        "deprecated": false,
        "description": "Fetch account information from the current session.",
        "operationId": "fetch_account_fetch_account",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfo"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/disable": {
      "post": {
        "summary": "Disable Account",
        "deprecated": false,
        "description": "Disable an account.",
        "operationId": "disable_account_disable_account",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/change/password": {
      "patch": {
        "summary": "Change Password",
        "deprecated": false,
        "description": "Change the current account password.",
        "operationId": "change_password_change_password",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataChangePassword"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/change/email": {
      "patch": {
        "summary": "Change Email",
        "deprecated": false,
        "description": "Change the associated account email.",
        "operationId": "change_email_change_email",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataChangeEmail"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/verify/{code}": {
      "post": {
        "summary": "Verify Email",
        "deprecated": false,
        "description": "Verify an email address.",
        "operationId": "verify_email_verify_email",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseVerify"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/account/reset_password": {
      "post": {
        "summary": "Send Password Reset",
        "deprecated": false,
        "description": "Send an email to reset account password.",
        "operationId": "send_password_reset_send_password_reset",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSendPasswordReset"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Password Reset",
        "deprecated": false,
        "description": "Confirm password reset and change the password.",
        "operationId": "password_reset_password_reset",
        "tags": [
          "Account"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataPasswordReset"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/session/login": {
      "post": {
        "summary": "Login",
        "deprecated": false,
        "description": "Login to an account.",
        "operationId": "login_login",
        "tags": [
          "Session"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataLogin"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseLogin"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/session/logout": {
      "post": {
        "summary": "Logout",
        "deprecated": false,
        "description": "Delete current session.",
        "operationId": "logout_logout",
        "tags": [
          "Session"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/session/all": {
      "get": {
        "summary": "Fetch Sessions",
        "deprecated": false,
        "description": "Fetch all sessions associated with this account.",
        "operationId": "fetch_all_fetch_all",
        "tags": [
          "Session"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionInfo"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete All Sessions",
        "deprecated": false,
        "description": "Delete all active sessions, optionally including current one.",
        "operationId": "revoke_all_revoke_all",
        "tags": [
          "Session"
        ],
        "parameters": [
          {
            "name": "revoke_self",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/session/{id}": {
      "delete": {
        "summary": "Revoke Session",
        "deprecated": false,
        "description": "Delete a specific active session.",
        "operationId": "revoke_revoke",
        "tags": [
          "Session"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Edit Session",
        "deprecated": false,
        "description": "Edit current session information.",
        "operationId": "edit_edit",
        "tags": [
          "Session"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEditSession"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/mfa/ticket": {
      "put": {
        "summary": "Create MFA ticket",
        "deprecated": false,
        "description": "Create a new MFA ticket or validate an existing one.",
        "operationId": "create_ticket_create_ticket",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MFAResponse"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFATicket"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/mfa/": {
      "get": {
        "summary": "MFA Status",
        "deprecated": false,
        "description": "Fetch MFA status of an account.",
        "operationId": "fetch_status_fetch_status",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiFactorStatus"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/mfa/recovery": {
      "post": {
        "summary": "Fetch Recovery Codes",
        "deprecated": false,
        "description": "Fetch recovery codes for an account.",
        "operationId": "fetch_recovery_fetch_recovery",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Generate Recovery Codes",
        "deprecated": false,
        "description": "Re-generate recovery codes for an account.",
        "operationId": "generate_recovery_generate_recovery",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/mfa/methods": {
      "get": {
        "summary": "Get MFA Methods",
        "deprecated": false,
        "description": "Fetch available MFA methods.",
        "operationId": "get_mfa_methods_get_mfa_methods",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MFAMethod"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/auth/mfa/totp": {
      "put": {
        "summary": "Enable TOTP 2FA",
        "deprecated": false,
        "description": "Generate a new secret for TOTP.",
        "operationId": "totp_enable_totp_enable",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MFAResponse"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "Generate TOTP Secret",
        "deprecated": false,
        "description": "Generate a new secret for TOTP.",
        "operationId": "totp_generate_secret_totp_generate_secret",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseTotpSecret"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Disable TOTP 2FA",
        "deprecated": false,
        "description": "Disable TOTP 2FA for an account.",
        "operationId": "totp_disable_totp_disable",
        "tags": [
          "MFA"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/onboard/hello": {
      "get": {
        "summary": "Check Onboarding Status",
        "deprecated": false,
        "description": "This will tell you whether the current account requires onboarding or whether you can continue to send requests as usual. You may skip calling this if you're restoring an existing session.",
        "operationId": "hello_hello",
        "tags": [
          "Onboarding"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataHello"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/onboard/complete": {
      "post": {
        "summary": "Complete Onboarding",
        "deprecated": false,
        "description": "This sets a new username, completes onboarding and allows a user to start using Revolt.",
        "operationId": "complete_complete",
        "tags": [
          "Onboarding"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataOnboard"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/push/subscribe": {
      "post": {
        "summary": "Push Subscribe",
        "deprecated": false,
        "description": "Create a new Web Push subscription.\n\nIf an existing subscription exists on this session, it will be removed.",
        "operationId": "subscribe_subscribe",
        "tags": [
          "Web Push"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebPushSubscription"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/push/unsubscribe": {
      "post": {
        "summary": "Unsubscribe",
        "deprecated": false,
        "description": "Remove the Web Push subscription associated with the current session.",
        "operationId": "unsubscribe_unsubscribe",
        "tags": [
          "Web Push"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/sync/settings/fetch": {
      "post": {
        "summary": "Fetch Settings",
        "deprecated": false,
        "description": "Fetch settings from server filtered by keys.\n\nThis will return an object with the requested keys, each value is a tuple of `(timestamp, value)`, the value is the previously uploaded data.",
        "operationId": "get_settings_fetch",
        "tags": [
          "Sync"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptionsFetchSettings"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 2,
                    "minItems": 2
                  },
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/sync/settings/set": {
      "post": {
        "summary": "Set Settings",
        "deprecated": false,
        "description": "Upload data to save to settings.",
        "operationId": "set_settings_set",
        "tags": [
          "Sync"
        ],
        "parameters": [
          {
            "name": "timestamp",
            "in": "query",
            "description": "Timestamp of settings change.\n\nUsed to avoid feedback loops.",
            "required": false,
            "schema": {
              "description": "Timestamp of settings change.\n\nUsed to avoid feedback loops.",
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "properties": {}
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          },
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/sync/unreads": {
      "get": {
        "summary": "Fetch Unreads",
        "deprecated": false,
        "description": "Fetch information about unread state on channels.",
        "operationId": "get_unreads_unreads",
        "tags": [
          "Sync"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelUnread"
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "Pet": {
        "required": [
          "name",
          "photoUrls",
          "id",
          "category",
          "tags",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 5000,
            "description": "宠物ID编号"
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "分组"
          },
          "name": {
            "type": "string",
            "example": "doggie",
            "description": "名称"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            },
            "description": "照片URL"
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "标签"
          },
          "status": {
            "type": "string",
            "description": "宠物销售状态",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "标签ID编号"
          },
          "name": {
            "type": "string",
            "description": "标签名称"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "RevoltConfig": {
        "title": "Server Configuration",
        "type": "object",
        "required": [
          "app",
          "build",
          "features",
          "revolt",
          "vapid",
          "ws"
        ],
        "properties": {
          "revolt": {
            "description": "Revolt API Version",
            "type": "string"
          },
          "features": {
            "description": "Features enabled on this Revolt node",
            "allOf": [
              {
                "$ref": "#/components/schemas/RevoltFeatures"
              }
            ]
          },
          "ws": {
            "description": "WebSocket URL",
            "type": "string"
          },
          "app": {
            "description": "URL pointing to the client serving this node",
            "type": "string"
          },
          "vapid": {
            "description": "Web Push VAPID public key",
            "type": "string"
          },
          "build": {
            "description": "Build information",
            "allOf": [
              {
                "$ref": "#/components/schemas/BuildInformation"
              }
            ]
          }
        }
      },
      "Category": {
        "description": "Channel category",
        "type": "object",
        "required": [
          "channels",
          "id",
          "title"
        ],
        "properties": {
          "id": {
            "description": "Unique ID for this category",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "title": {
            "description": "Title for this category",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "channels": {
            "description": "Channels in this category",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RevoltFeatures": {
        "title": "Feature Configuration",
        "type": "object",
        "required": [
          "autumn",
          "captcha",
          "email",
          "invite_only",
          "january",
          "voso"
        ],
        "properties": {
          "captcha": {
            "description": "hCaptcha configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptchaFeature"
              }
            ]
          },
          "email": {
            "description": "Whether email verification is enabled",
            "type": "boolean"
          },
          "invite_only": {
            "description": "Whether this server is invite only",
            "type": "boolean"
          },
          "autumn": {
            "description": "File server service configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/Feature"
              }
            ]
          },
          "january": {
            "description": "Proxy service configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/Feature"
              }
            ]
          },
          "voso": {
            "description": "Voice server configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/VoiceFeature"
              }
            ]
          }
        }
      },
      "CaptchaFeature": {
        "title": "hCaptcha Configuration",
        "type": "object",
        "required": [
          "enabled",
          "key"
        ],
        "properties": {
          "enabled": {
            "description": "Whether captcha is enabled",
            "type": "boolean"
          },
          "key": {
            "description": "Client key used for solving captcha",
            "type": "string"
          }
        }
      },
      "Feature": {
        "title": "Generic Service Configuration",
        "type": "object",
        "required": [
          "enabled",
          "url"
        ],
        "properties": {
          "enabled": {
            "description": "Whether the service is enabled",
            "type": "boolean"
          },
          "url": {
            "description": "URL pointing to the service",
            "type": "string"
          }
        }
      },
      "VoiceFeature": {
        "title": "Voice Server Configuration",
        "type": "object",
        "required": [
          "enabled",
          "url",
          "ws"
        ],
        "properties": {
          "enabled": {
            "description": "Whether voice is enabled",
            "type": "boolean"
          },
          "url": {
            "description": "URL pointing to the voice API",
            "type": "string"
          },
          "ws": {
            "description": "URL pointing to the voice WebSocket server",
            "type": "string"
          }
        }
      },
      "BuildInformation": {
        "title": "Build Information",
        "type": "object",
        "required": [
          "commit_sha",
          "commit_timestamp",
          "origin_url",
          "semver",
          "timestamp"
        ],
        "properties": {
          "commit_sha": {
            "description": "Commit Hash",
            "type": "string"
          },
          "commit_timestamp": {
            "description": "Commit Timestamp",
            "type": "string"
          },
          "semver": {
            "description": "Git Semver",
            "type": "string"
          },
          "origin_url": {
            "description": "Git Origin URL",
            "type": "string"
          },
          "timestamp": {
            "description": "Build Timestamp",
            "type": "string"
          }
        }
      },
      "Error": {
        "title": "Error",
        "description": "Error information",
        "type": "object",
        "oneOf": [
          {
            "description": "This error was not labeled :(",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "LabelMe"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AlreadyOnboarded"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UsernameTaken"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidUsername"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DiscriminatorChangeRatelimited"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnknownUser"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AlreadyFriends"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AlreadySentRequest"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Blocked"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "BlockedByOther"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotFriends"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyPendingFriendRequests"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnknownChannel"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnknownAttachment"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnknownMessage"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CannotEditMessage"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CannotJoinCall"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyAttachments"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyEmbeds"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyReplies"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyChannels"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "EmptyMessage"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "PayloadTooLarge"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CannotRemoveYourself"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "GroupTooLarge"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AlreadyInGroup"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotInGroup"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AlreadyPinned"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotPinned"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnknownServer"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidRole"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Banned"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyServers"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyEmoji"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TooManyRoles"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AlreadyInServer"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CannotTimeoutYourself"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ReachedMaximumBots"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IsBot"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "BotIsPrivate"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CannotReportYourself"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permission",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "MissingPermission"
                ]
              },
              "permission": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permission",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "MissingUserPermission"
                ]
              },
              "permission": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotElevated"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotPrivileged"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CannotGiveMissingPermissions"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotOwner"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "collection",
              "operation",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DatabaseError"
                ]
              },
              "operation": {
                "type": "string"
              },
              "collection": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InternalError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidOperation"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidCredentials"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidProperty"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidSession"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotAuthenticated"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DuplicateNonce"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NotFound"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NoEffect"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "FailedValidation"
                ]
              },
              "error": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ProxyError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "FileTooSmall"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "max",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "FileTooLarge"
                ]
              },
              "max": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "FileTypeNotAllowed"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ImageProcessingFailed"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NoEmbedData"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "VosoUnavailable"
                ]
              }
            }
          }
        ],
        "required": [
          "location"
        ],
        "properties": {
          "location": {
            "description": "Where this error occurred",
            "type": "string"
          }
        }
      },
      "User": {
        "description": "User",
        "type": "object",
        "required": [
          "_id",
          "discriminator",
          "online",
          "relationship",
          "username"
        ],
        "properties": {
          "_id": {
            "description": "Unique Id",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "type": "string"
          },
          "discriminator": {
            "description": "Discriminator",
            "type": "string"
          },
          "display_name": {
            "description": "Display name",
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "description": "Avatar attachment",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          },
          "relations": {
            "description": "Relationships with other users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "badges": {
            "description": "Bitfield of user badges\n\nhttps://docs.rs/revolt-models/latest/revolt_models/v0/enum.UserBadges.html",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "status": {
            "description": "User's current status",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "type": "null"
          },
          "flags": {
            "description": "Enum of user flags\n\nhttps://docs.rs/revolt-models/latest/revolt_models/v0/enum.UserFlags.html",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "privileged": {
            "description": "Whether this user is privileged",
            "type": "boolean"
          },
          "bot": {
            "description": "Bot information",
            "allOf": [
              {
                "$ref": "#/components/schemas/BotInformation"
              }
            ],
            "type": "null"
          },
          "relationship": {
            "description": "Current session user's relationship with this user",
            "allOf": [
              {
                "$ref": "#/components/schemas/RelationshipStatus"
              }
            ]
          },
          "online": {
            "description": "Whether this user is currently online",
            "type": "boolean"
          }
        }
      },
      "File": {
        "description": "File",
        "type": "object",
        "required": [
          "_id",
          "content_type",
          "filename",
          "metadata",
          "size",
          "tag"
        ],
        "properties": {
          "_id": {
            "description": "Unique Id",
            "type": "string"
          },
          "tag": {
            "description": "Tag / bucket this file was uploaded to",
            "type": "string"
          },
          "filename": {
            "description": "Original filename",
            "type": "string"
          },
          "metadata": {
            "description": "Parsed metadata of this file",
            "allOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ]
          },
          "content_type": {
            "description": "Raw content type of this file",
            "type": "string"
          },
          "size": {
            "description": "Size of this file (in bytes)",
            "type": "integer",
            "format": "int"
          },
          "deleted": {
            "description": "Whether this file was deleted",
            "type": "boolean",
            "nullable": true
          },
          "reported": {
            "description": "Whether this file was reported",
            "type": "boolean",
            "nullable": true
          },
          "message_id": {
            "type": "string",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "nullable": true
          },
          "server_id": {
            "type": "string",
            "nullable": true
          },
          "object_id": {
            "description": "Id of the object this file is associated with",
            "type": "string",
            "nullable": true
          }
        }
      },
      "Metadata": {
        "description": "Metadata associated with a file",
        "oneOf": [
          {
            "description": "File is just a generic uncategorised file",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "File"
                ]
              }
            }
          },
          {
            "description": "File contains textual data and should be displayed as such",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Text"
                ]
              }
            }
          },
          {
            "description": "File is an image with specific dimensions",
            "type": "object",
            "required": [
              "height",
              "type",
              "width"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Image"
                ]
              },
              "width": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "height": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "description": "File is a video with specific dimensions",
            "type": "object",
            "required": [
              "height",
              "type",
              "width"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Video"
                ]
              },
              "width": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "height": {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "description": "File is audio",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Audio"
                ]
              }
            }
          }
        ]
      },
      "Relationship": {
        "description": "Relationship entry indicating current status with other user",
        "type": "object",
        "required": [
          "_id",
          "status"
        ],
        "properties": {
          "_id": {
            "description": "Other user's Id",
            "type": "string"
          },
          "status": {
            "description": "Relationship status with them",
            "allOf": [
              {
                "$ref": "#/components/schemas/RelationshipStatus"
              }
            ]
          }
        }
      },
      "RelationshipStatus": {
        "description": "User's relationship with another user (or themselves)",
        "type": "string",
        "enum": [
          "None",
          "User",
          "Friend",
          "Outgoing",
          "Incoming",
          "Blocked",
          "BlockedOther"
        ]
      },
      "UserStatus": {
        "description": "User's active status",
        "type": "object",
        "properties": {
          "text": {
            "description": "Custom status text",
            "type": "string",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "presence": {
            "description": "Current presence option",
            "allOf": [
              {
                "$ref": "#/components/schemas/Presence"
              }
            ],
            "type": "null"
          }
        }
      },
      "Presence": {
        "description": "Presence status",
        "type": "string",
        "enum": [
          "Online",
          "Idle",
          "Focus",
          "Busy",
          "Invisible"
        ]
      },
      "BotInformation": {
        "description": "Bot information for if the user is a bot",
        "type": "object",
        "required": [
          "owner"
        ],
        "properties": {
          "owner": {
            "description": "Id of the owner of this bot",
            "type": "string"
          }
        }
      },
      "Id": {
        "type": "string"
      },
      "FlagResponse": {
        "description": "User flag reponse",
        "type": "object",
        "required": [
          "flags"
        ],
        "properties": {
          "flags": {
            "description": "Flags",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DataEditUser": {
        "description": "New user information",
        "type": "object",
        "properties": {
          "display_name": {
            "description": "New display name",
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[^\\u200B\\n\\r]+$",
            "nullable": true
          },
          "avatar": {
            "description": "Attachment Id for avatar",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          },
          "status": {
            "description": "New user status",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ],
            "type": "null"
          },
          "profile": {
            "description": "New user profile data\n\nThis is applied as a partial.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataUserProfile"
              }
            ],
            "type": "null"
          },
          "badges": {
            "description": "Bitfield of user badges",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "flags": {
            "description": "Enum of user flags",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "remove": {
            "description": "Fields to remove from user object",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsUser"
            },
            "minItems": 1,
            "nullable": true
          }
        }
      },
      "DataUserProfile": {
        "description": "New user profile data",
        "type": "object",
        "properties": {
          "content": {
            "description": "Text to set as user profile description",
            "type": "string",
            "maxLength": 2000,
            "minLength": 0,
            "nullable": true
          },
          "background": {
            "description": "Attachment Id for background",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "FieldsUser": {
        "description": "Optional fields on user object",
        "type": "string",
        "enum": [
          "Avatar",
          "StatusText",
          "StatusPresence",
          "ProfileContent",
          "ProfileBackground",
          "DisplayName",
          "Internal"
        ]
      },
      "DataChangeUsername": {
        "title": "Username Information",
        "type": "object",
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "description": "New username",
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^(\\p{L}|[\\d_.-])+$"
          },
          "password": {
            "description": "Current account password",
            "type": "string",
            "maxLength": 1024,
            "minLength": 8
          }
        }
      },
      "UserProfile": {
        "description": "User's profile",
        "type": "object",
        "properties": {
          "content": {
            "description": "Text content on user's profile",
            "type": "string",
            "maxLength": 2000,
            "minLength": 0,
            "nullable": true
          },
          "background": {
            "description": "Background visible on user's profile",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          }
        }
      },
      "Channel": {
        "description": "Channel",
        "oneOf": [
          {
            "description": "Personal \"Saved Notes\" channel which allows users to save messages",
            "type": "object",
            "required": [
              "_id",
              "channel_type",
              "user"
            ],
            "properties": {
              "channel_type": {
                "type": "string",
                "enum": [
                  "SavedMessages"
                ]
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "user": {
                "description": "Id of the user this channel belongs to",
                "type": "string"
              }
            }
          },
          {
            "description": "Direct message channel between two users",
            "type": "object",
            "required": [
              "_id",
              "active",
              "channel_type",
              "recipients"
            ],
            "properties": {
              "channel_type": {
                "type": "string",
                "enum": [
                  "DirectMessage"
                ]
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "active": {
                "description": "Whether this direct message channel is currently open on both sides",
                "type": "boolean"
              },
              "recipients": {
                "description": "2-tuple of user ids participating in direct message",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "last_message_id": {
                "description": "Id of the last message sent in this channel",
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "description": "Group channel between 1 or more participants",
            "type": "object",
            "required": [
              "_id",
              "channel_type",
              "name",
              "owner",
              "recipients"
            ],
            "properties": {
              "channel_type": {
                "type": "string",
                "enum": [
                  "Group"
                ]
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "name": {
                "description": "Display name of the channel",
                "type": "string"
              },
              "owner": {
                "description": "User id of the owner of the group",
                "type": "string"
              },
              "description": {
                "description": "Channel description",
                "type": "string",
                "nullable": true
              },
              "recipients": {
                "description": "Array of user ids participating in channel",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "icon": {
                "description": "Custom icon attachment",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "last_message_id": {
                "description": "Id of the last message sent in this channel",
                "type": "string",
                "nullable": true
              },
              "permissions": {
                "description": "Permissions assigned to members of this group (does not apply to the owner of the group)",
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "nsfw": {
                "description": "Whether this group is marked as not safe for work",
                "type": "boolean"
              }
            }
          },
          {
            "description": "Text channel belonging to a server",
            "type": "object",
            "required": [
              "_id",
              "channel_type",
              "name",
              "server"
            ],
            "properties": {
              "channel_type": {
                "type": "string",
                "enum": [
                  "TextChannel"
                ]
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "server": {
                "description": "Id of the server this channel belongs to",
                "type": "string"
              },
              "name": {
                "description": "Display name of the channel",
                "type": "string"
              },
              "description": {
                "description": "Channel description",
                "type": "string",
                "nullable": true
              },
              "icon": {
                "description": "Custom icon attachment",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "last_message_id": {
                "description": "Id of the last message sent in this channel",
                "type": "string",
                "nullable": true
              },
              "default_permissions": {
                "description": "Default permissions assigned to users in this channel",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OverrideField"
                  }
                ],
                "type": "null"
              },
              "role_permissions": {
                "description": "Permissions assigned based on role to this channel",
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/OverrideField"
                }
              },
              "nsfw": {
                "description": "Whether this channel is marked as not safe for work",
                "type": "boolean"
              }
            }
          },
          {
            "description": "Voice channel belonging to a server",
            "type": "object",
            "required": [
              "_id",
              "channel_type",
              "name",
              "server"
            ],
            "properties": {
              "channel_type": {
                "type": "string",
                "enum": [
                  "VoiceChannel"
                ]
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "server": {
                "description": "Id of the server this channel belongs to",
                "type": "string"
              },
              "name": {
                "description": "Display name of the channel",
                "type": "string"
              },
              "description": {
                "description": "Channel description",
                "type": "string",
                "nullable": true
              },
              "icon": {
                "description": "Custom icon attachment",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "default_permissions": {
                "description": "Default permissions assigned to users in this channel",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OverrideField"
                  }
                ],
                "type": "null"
              },
              "role_permissions": {
                "description": "Permissions assigned based on role to this channel",
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/OverrideField"
                }
              },
              "nsfw": {
                "description": "Whether this channel is marked as not safe for work",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "OverrideField": {
        "description": "Representation of a single permission override as it appears on models and in the database",
        "type": "object",
        "required": [
          "a",
          "d"
        ],
        "properties": {
          "a": {
            "description": "Allow bit flags",
            "type": "integer",
            "format": "int64"
          },
          "d": {
            "description": "Disallow bit flags",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MutualResponse": {
        "description": "Mutual friends and servers response",
        "type": "object",
        "required": [
          "servers",
          "users"
        ],
        "properties": {
          "users": {
            "description": "Array of mutual user IDs that both users are friends with",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "servers": {
            "description": "Array of mutual server IDs that both users are in",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DataSendFriendRequest": {
        "description": "User lookup information",
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "description": "Username and discriminator combo separated by #",
            "type": "string"
          }
        }
      },
      "BotWithUserResponse": {
        "description": "Bot with user response",
        "type": "object",
        "required": [
          "_id",
          "owner",
          "public",
          "token",
          "user"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "_id": {
            "description": "Bot Id",
            "type": "string"
          },
          "owner": {
            "description": "User Id of the bot owner",
            "type": "string"
          },
          "token": {
            "description": "Token used to authenticate requests for this bot",
            "type": "string"
          },
          "public": {
            "description": "Whether the bot is public (may be invited by anyone)",
            "type": "boolean"
          },
          "analytics": {
            "description": "Whether to enable analytics",
            "type": "boolean"
          },
          "discoverable": {
            "description": "Whether this bot should be publicly discoverable",
            "type": "boolean"
          },
          "interactions_url": {
            "description": "Reserved; URL for handling interactions",
            "type": "string"
          },
          "terms_of_service_url": {
            "description": "URL for terms of service",
            "type": "string"
          },
          "privacy_policy_url": {
            "description": "URL for privacy policy",
            "type": "string"
          },
          "flags": {
            "description": "Enum of bot flags",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "DataCreateBot": {
        "description": "Bot Details",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Bot username",
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^(\\p{L}|[\\d_.-])+$"
          }
        }
      },
      "InviteBotDestination": {
        "description": "Where we are inviting a bot to",
        "anyOf": [
          {
            "description": "Invite to a server",
            "type": "object",
            "required": [
              "server"
            ],
            "properties": {
              "server": {
                "description": "Server Id",
                "type": "string"
              }
            }
          },
          {
            "description": "Invite to a group",
            "type": "object",
            "required": [
              "group"
            ],
            "properties": {
              "group": {
                "description": "Group Id",
                "type": "string"
              }
            }
          }
        ]
      },
      "PublicBot": {
        "description": "Public Bot",
        "type": "object",
        "required": [
          "_id",
          "username"
        ],
        "properties": {
          "_id": {
            "description": "Bot Id",
            "type": "string"
          },
          "username": {
            "description": "Bot Username",
            "type": "string"
          },
          "avatar": {
            "description": "Profile Avatar",
            "type": "string"
          },
          "description": {
            "description": "Profile Description",
            "type": "string"
          }
        }
      },
      "FetchBotResponse": {
        "description": "Bot Response",
        "type": "object",
        "required": [
          "bot",
          "user"
        ],
        "properties": {
          "bot": {
            "description": "Bot object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Bot"
              }
            ]
          },
          "user": {
            "description": "User object",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          }
        }
      },
      "Bot": {
        "description": "Bot",
        "type": "object",
        "required": [
          "_id",
          "owner",
          "public",
          "token"
        ],
        "properties": {
          "_id": {
            "description": "Bot Id",
            "type": "string"
          },
          "owner": {
            "description": "User Id of the bot owner",
            "type": "string"
          },
          "token": {
            "description": "Token used to authenticate requests for this bot",
            "type": "string"
          },
          "public": {
            "description": "Whether the bot is public (may be invited by anyone)",
            "type": "boolean"
          },
          "analytics": {
            "description": "Whether to enable analytics",
            "type": "boolean"
          },
          "discoverable": {
            "description": "Whether this bot should be publicly discoverable",
            "type": "boolean"
          },
          "interactions_url": {
            "description": "Reserved; URL for handling interactions",
            "type": "string"
          },
          "terms_of_service_url": {
            "description": "URL for terms of service",
            "type": "string"
          },
          "privacy_policy_url": {
            "description": "URL for privacy policy",
            "type": "string"
          },
          "flags": {
            "description": "Enum of bot flags",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "OwnedBotsResponse": {
        "description": "Owned Bots Response\n\nBoth lists are sorted by their IDs.\n\nTODO: user should be in bot object",
        "type": "object",
        "required": [
          "bots",
          "users"
        ],
        "properties": {
          "bots": {
            "description": "Bot objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bot"
            }
          },
          "users": {
            "description": "User objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "DataEditBot": {
        "description": "New Bot Details",
        "type": "object",
        "properties": {
          "name": {
            "description": "Bot username",
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^(\\p{L}|[\\d_.-])+$",
            "nullable": true
          },
          "public": {
            "description": "Whether the bot can be added by anyone",
            "type": "boolean",
            "nullable": true
          },
          "analytics": {
            "description": "Whether analytics should be gathered for this bot\n\nMust be enabled in order to show up on [Revolt Discover](https://rvlt.gg).",
            "type": "boolean",
            "nullable": true
          },
          "interactions_url": {
            "description": "Interactions URL",
            "type": "string",
            "maxLength": 2048,
            "minLength": 1,
            "nullable": true
          },
          "remove": {
            "description": "Fields to remove from bot object",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsBot"
            },
            "minItems": 1,
            "nullable": true
          }
        }
      },
      "FieldsBot": {
        "description": "Optional fields on bot object",
        "type": "string",
        "enum": [
          "Token",
          "InteractionsURL"
        ]
      },
      "DataEditChannel": {
        "description": "New webhook information",
        "type": "object",
        "properties": {
          "name": {
            "description": "Channel name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true
          },
          "description": {
            "description": "Channel description",
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "owner": {
            "description": "Group owner",
            "type": "string",
            "nullable": true
          },
          "icon": {
            "description": "Icon\n\nProvide an Autumn attachment Id.",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          },
          "nsfw": {
            "description": "Whether this channel is age-restricted",
            "type": "boolean",
            "nullable": true
          },
          "archived": {
            "description": "Whether this channel is archived",
            "type": "boolean",
            "nullable": true
          },
          "remove": {
            "description": "Fields to remove from channel",
            "default": null,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsChannel"
            },
            "nullable": true
          }
        }
      },
      "FieldsChannel": {
        "description": "Optional fields on channel object",
        "type": "string",
        "enum": [
          "Description",
          "Icon",
          "DefaultPermissions"
        ]
      },
      "Invite": {
        "description": "Invite",
        "oneOf": [
          {
            "description": "Invite to a specific server channel",
            "type": "object",
            "required": [
              "_id",
              "channel",
              "creator",
              "server",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Server"
                ]
              },
              "_id": {
                "description": "Invite code",
                "type": "string"
              },
              "server": {
                "description": "Id of the server this invite points to",
                "type": "string"
              },
              "creator": {
                "description": "Id of user who created this invite",
                "type": "string"
              },
              "channel": {
                "description": "Id of the server channel this invite points to",
                "type": "string"
              }
            }
          },
          {
            "description": "Invite to a group channel",
            "type": "object",
            "required": [
              "_id",
              "channel",
              "creator",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Group"
                ]
              },
              "_id": {
                "description": "Invite code",
                "type": "string"
              },
              "creator": {
                "description": "Id of user who created this invite",
                "type": "string"
              },
              "channel": {
                "description": "Id of the group channel this invite points to",
                "type": "string"
              }
            }
          }
        ]
      },
      "Message": {
        "description": "Message",
        "type": "object",
        "required": [
          "_id",
          "author",
          "channel"
        ],
        "properties": {
          "_id": {
            "description": "Unique Id",
            "type": "string"
          },
          "nonce": {
            "description": "Unique value generated by client sending this message",
            "type": "string",
            "nullable": true
          },
          "channel": {
            "description": "Id of the channel this message was sent in",
            "type": "string"
          },
          "author": {
            "description": "Id of the user or webhook that sent this message",
            "type": "string"
          },
          "user": {
            "description": "The user that sent this message",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "type": "null"
          },
          "member": {
            "description": "The member that sent this message",
            "allOf": [
              {
                "$ref": "#/components/schemas/Member"
              }
            ],
            "type": "null"
          },
          "webhook": {
            "description": "The webhook that sent this message",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageWebhook"
              }
            ],
            "type": "null"
          },
          "content": {
            "description": "Message content",
            "type": "string",
            "nullable": true
          },
          "system": {
            "description": "System message",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemMessage"
              }
            ],
            "type": "null"
          },
          "attachments": {
            "description": "Array of attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "nullable": true
          },
          "edited": {
            "description": "Time at which this message was last edited",
            "allOf": [
              {
                "$ref": "#/components/schemas/ISO8601%20Timestamp"
              }
            ],
            "type": "null"
          },
          "embeds": {
            "description": "Attached embeds to this message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Embed"
            },
            "nullable": true
          },
          "mentions": {
            "description": "Array of user ids mentioned in this message",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "replies": {
            "description": "Array of message ids this message is replying to",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "reactions": {
            "description": "Hashmap of emoji IDs to array of user IDs",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "properties": {}
          },
          "interactions": {
            "description": "Information about how this message should be interacted with",
            "allOf": [
              {
                "$ref": "#/components/schemas/Interactions"
              }
            ]
          },
          "masquerade": {
            "description": "Name and / or avatar overrides for this message",
            "allOf": [
              {
                "$ref": "#/components/schemas/Masquerade"
              }
            ],
            "type": "null"
          },
          "pinned": {
            "description": "Whether or not the message in pinned",
            "type": "boolean",
            "nullable": true
          },
          "flags": {
            "description": "Bitfield of message flags\n\nhttps://docs.rs/revolt-models/latest/revolt_models/v0/enum.MessageFlags.html",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "Member": {
        "description": "Server Member",
        "type": "object",
        "required": [
          "_id",
          "joined_at"
        ],
        "properties": {
          "_id": {
            "description": "Unique member id",
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberCompositeKey"
              }
            ]
          },
          "joined_at": {
            "description": "Time at which this user joined the server",
            "allOf": [
              {
                "$ref": "#/components/schemas/ISO8601%20Timestamp"
              }
            ]
          },
          "nickname": {
            "description": "Member's nickname",
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "description": "Avatar attachment",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          },
          "roles": {
            "description": "Member's roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeout": {
            "description": "Timestamp this member is timed out until",
            "allOf": [
              {
                "$ref": "#/components/schemas/ISO8601%20Timestamp"
              }
            ],
            "type": "null"
          }
        }
      },
      "MemberCompositeKey": {
        "description": "Composite primary key consisting of server and user id",
        "type": "object",
        "required": [
          "server",
          "user"
        ],
        "properties": {
          "server": {
            "description": "Server Id",
            "type": "string"
          },
          "user": {
            "description": "User Id",
            "type": "string"
          }
        }
      },
      "ISO8601 Timestamp": {
        "description": "ISO8601 formatted timestamp",
        "type": "string",
        "format": "date-time",
        "examples": [
          "1970-01-01T00:00:00Z"
        ]
      },
      "MessageWebhook": {
        "description": "Information about the webhook bundled with Message",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SystemMessage": {
        "description": "System Event",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              },
              "content": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "user_added"
                ]
              },
              "id": {
                "type": "string"
              },
              "by": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "user_remove"
                ]
              },
              "id": {
                "type": "string"
              },
              "by": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "user_joined"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "user_left"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "user_kicked"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "user_banned"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "name",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "channel_renamed"
                ]
              },
              "name": {
                "type": "string"
              },
              "by": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "channel_description_changed"
                ]
              },
              "by": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "channel_icon_changed"
                ]
              },
              "by": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "from",
              "to",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "channel_ownership_changed"
                ]
              },
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "message_pinned"
                ]
              },
              "id": {
                "type": "string"
              },
              "by": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "by",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "message_unpinned"
                ]
              },
              "id": {
                "type": "string"
              },
              "by": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Embed": {
        "description": "Embed",
        "oneOf": [
          {
            "description": "Website metadata",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Website"
                ]
              },
              "url": {
                "description": "Direct URL to web page",
                "type": "string",
                "nullable": true
              },
              "original_url": {
                "description": "Original direct URL",
                "type": "string",
                "nullable": true
              },
              "special": {
                "description": "Remote content",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Special"
                  }
                ],
                "type": "null"
              },
              "title": {
                "description": "Title of website",
                "type": "string",
                "nullable": true
              },
              "description": {
                "description": "Description of website",
                "type": "string",
                "nullable": true
              },
              "image": {
                "description": "Embedded image",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Image"
                  }
                ],
                "type": "null"
              },
              "video": {
                "description": "Embedded video",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Video"
                  }
                ],
                "type": "null"
              },
              "site_name": {
                "description": "Site name",
                "type": "string",
                "nullable": true
              },
              "icon_url": {
                "description": "URL to site icon",
                "type": "string",
                "nullable": true
              },
              "colour": {
                "description": "CSS Colour",
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "description": "Image",
            "type": "object",
            "required": [
              "height",
              "size",
              "type",
              "url",
              "width"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Image"
                ]
              },
              "url": {
                "description": "URL to the original image",
                "type": "string"
              },
              "width": {
                "description": "Width of the image",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "height": {
                "description": "Height of the image",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "size": {
                "description": "Positioning and size",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ImageSize"
                  }
                ]
              }
            }
          },
          {
            "description": "Video",
            "type": "object",
            "required": [
              "height",
              "type",
              "url",
              "width"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Video"
                ]
              },
              "url": {
                "description": "URL to the original video",
                "type": "string"
              },
              "width": {
                "description": "Width of the video",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              },
              "height": {
                "description": "Height of the video",
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            }
          },
          {
            "description": "Text Embed",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Text"
                ]
              },
              "icon_url": {
                "description": "URL to icon",
                "type": "string",
                "nullable": true
              },
              "url": {
                "description": "URL for title",
                "type": "string",
                "nullable": true
              },
              "title": {
                "description": "Title of text embed",
                "type": "string",
                "nullable": true
              },
              "description": {
                "description": "Description of text embed",
                "type": "string",
                "nullable": true
              },
              "media": {
                "description": "ID of uploaded autumn file",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "colour": {
                "description": "CSS Colour",
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "None"
                ]
              }
            }
          }
        ]
      },
      "Special": {
        "description": "Information about special remote content",
        "oneOf": [
          {
            "description": "No remote content",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "None"
                ]
              }
            }
          },
          {
            "description": "Content hint that this contains a GIF\n\nUse metadata to find video or image to play",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "GIF"
                ]
              }
            }
          },
          {
            "description": "YouTube video",
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "YouTube"
                ]
              },
              "id": {
                "type": "string"
              },
              "timestamp": {
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "description": "Lightspeed.tv stream",
            "type": "object",
            "required": [
              "content_type",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Lightspeed"
                ]
              },
              "content_type": {
                "$ref": "#/components/schemas/LightspeedType"
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "description": "Twitch stream or clip",
            "type": "object",
            "required": [
              "content_type",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Twitch"
                ]
              },
              "content_type": {
                "$ref": "#/components/schemas/TwitchType"
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "description": "Spotify track",
            "type": "object",
            "required": [
              "content_type",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Spotify"
                ]
              },
              "content_type": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "description": "Soundcloud track",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Soundcloud"
                ]
              }
            }
          },
          {
            "description": "Bandcamp track",
            "type": "object",
            "required": [
              "content_type",
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Bandcamp"
                ]
              },
              "content_type": {
                "$ref": "#/components/schemas/BandcampType"
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "album_id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AppleMusic"
                ]
              },
              "album_id": {
                "type": "string"
              },
              "track_id": {
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "description": "Streamable Video",
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Streamable"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "LightspeedType": {
        "description": "Type of remote Lightspeed.tv content",
        "type": "string",
        "enum": [
          "Channel"
        ]
      },
      "TwitchType": {
        "description": "Type of remote Twitch content",
        "type": "string",
        "enum": [
          "Channel",
          "Video",
          "Clip"
        ]
      },
      "BandcampType": {
        "description": "Type of remote Bandcamp content",
        "type": "string",
        "enum": [
          "Album",
          "Track"
        ]
      },
      "Image": {
        "description": "Image",
        "type": "object",
        "required": [
          "height",
          "size",
          "url",
          "width"
        ],
        "properties": {
          "url": {
            "description": "URL to the original image",
            "type": "string"
          },
          "width": {
            "description": "Width of the image",
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "height": {
            "description": "Height of the image",
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "size": {
            "description": "Positioning and size",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageSize"
              }
            ]
          }
        }
      },
      "ImageSize": {
        "description": "Image positioning and size",
        "type": "string",
        "enum": [
          "Large",
          "Preview"
        ]
      },
      "Video": {
        "description": "Video",
        "type": "object",
        "required": [
          "height",
          "url",
          "width"
        ],
        "properties": {
          "url": {
            "description": "URL to the original video",
            "type": "string"
          },
          "width": {
            "description": "Width of the video",
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "height": {
            "description": "Height of the video",
            "type": "integer",
            "format": "uint",
            "minimum": 0
          }
        }
      },
      "Interactions": {
        "description": "Information to guide interactions on this message",
        "type": "object",
        "properties": {
          "reactions": {
            "description": "Reactions which should always appear and be distinct",
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "nullable": true
          },
          "restrict_reactions": {
            "description": "Whether reactions should be restricted to the given list\n\nCan only be set to true if reactions list is of at least length 1",
            "type": "boolean"
          }
        }
      },
      "Masquerade": {
        "description": "Name and / or avatar override information",
        "type": "object",
        "properties": {
          "name": {
            "description": "Replace the display name shown on this message",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true
          },
          "avatar": {
            "description": "Replace the avatar shown on this message (URL to image file)",
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true
          },
          "colour": {
            "description": "Replace the display role colour shown on this message\n\nMust have `ManageRole` permission to use",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "(?i)^(?:[a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+|(repeating-)?(linear|conic|radial)-gradient\\(([a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+|\\d+deg)([ ]+(\\d{1,3}%|0))?(,[ ]*([a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+)([ ]+(\\d{1,3}%|0))?)+\\))$",
            "nullable": true
          }
        }
      },
      "DataMessageSend": {
        "description": "Message to send",
        "type": "object",
        "properties": {
          "nonce": {
            "description": "Unique token to prevent duplicate message sending\n\n**This is deprecated and replaced by `Idempotency-Key`!**",
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true
          },
          "content": {
            "description": "Message content to send",
            "type": "string",
            "maxLength": 2000,
            "minLength": 0,
            "nullable": true
          },
          "attachments": {
            "description": "Attachments to include in message",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "replies": {
            "description": "Messages to reply to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyIntent"
            },
            "nullable": true
          },
          "embeds": {
            "description": "Embeds to include in message\n\nText embed content contributes to the content length cap",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendableEmbed"
            },
            "nullable": true
          },
          "masquerade": {
            "description": "Masquerade to apply to this message",
            "allOf": [
              {
                "$ref": "#/components/schemas/Masquerade"
              }
            ],
            "type": "null"
          },
          "interactions": {
            "description": "Information about how this message should be interacted with",
            "allOf": [
              {
                "$ref": "#/components/schemas/Interactions"
              }
            ],
            "type": "null"
          },
          "flags": {
            "description": "Bitfield of message flags\n\nhttps://docs.rs/revolt-models/latest/revolt_models/v0/enum.MessageFlags.html",
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "nullable": true
          }
        }
      },
      "ReplyIntent": {
        "description": "What this message should reply to and how",
        "type": "object",
        "required": [
          "id",
          "mention"
        ],
        "properties": {
          "id": {
            "description": "Message Id",
            "type": "string"
          },
          "mention": {
            "description": "Whether this reply should mention the message's author",
            "type": "boolean"
          },
          "fail_if_not_exists": {
            "description": "Whether to error if the referenced message doesn't exist. Otherwise, send a message without this reply. Default is true.",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "SendableEmbed": {
        "description": "Representation of a text embed before it is sent.",
        "type": "object",
        "properties": {
          "icon_url": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          },
          "url": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": true
          },
          "title": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "nullable": true
          },
          "description": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true
          },
          "colour": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "(?i)^(?:[a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+|(repeating-)?(linear|conic|radial)-gradient\\(([a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+|\\d+deg)([ ]+(\\d{1,3}%|0))?(,[ ]*([a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+)([ ]+(\\d{1,3}%|0))?)+\\))$",
            "nullable": true
          }
        }
      },
      "BulkMessageResponse": {
        "description": "Bulk Message Response",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          {
            "type": "object",
            "required": [
              "messages",
              "users"
            ],
            "properties": {
              "messages": {
                "description": "List of messages",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "users": {
                "description": "List of users",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "members": {
                "description": "List of members",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Member"
                },
                "nullable": true
              }
            }
          }
        ]
      },
      "MessageSort": {
        "description": "Message Sort\n\nSort used for retrieving messages",
        "type": "string",
        "enum": [
          "Relevance",
          "Latest",
          "Oldest"
        ]
      },
      "DataMessageSearch": {
        "description": "Options for searching for messages",
        "type": "object",
        "properties": {
          "query": {
            "description": "Full-text search query\n\nSee [MongoDB documentation](https://docs.mongodb.com/manual/text-search/#-text-operator) for more information.",
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "nullable": true
          },
          "pinned": {
            "description": "Whether to only search for pinned messages, cannot be sent with `query`.",
            "type": "boolean",
            "nullable": true
          },
          "limit": {
            "description": "Maximum number of messages to fetch",
            "type": "integer",
            "format": "int64",
            "maximum": 100,
            "minimum": 1,
            "nullable": true
          },
          "before": {
            "description": "Message id before which messages should be fetched",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "nullable": true
          },
          "after": {
            "description": "Message id after which messages should be fetched",
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "nullable": true
          },
          "sort": {
            "description": "Message sort direction\n\nBy default, it will be sorted by latest.",
            "default": "Relevance",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSort"
              }
            ]
          },
          "include_users": {
            "description": "Whether to include user (and member, if server channel) objects",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "DataEditMessage": {
        "description": "Changes to make to message",
        "type": "object",
        "properties": {
          "content": {
            "description": "New message content",
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "nullable": true
          },
          "embeds": {
            "description": "Embeds to include in the message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendableEmbed"
            },
            "maxItems": 10,
            "minItems": 0,
            "nullable": true
          }
        }
      },
      "OptionsBulkDelete": {
        "description": "Options for bulk deleting messages",
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "description": "Message IDs",
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "minItems": 1
          }
        }
      },
      "DataCreateGroup": {
        "description": "Create new group",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Group name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "description": {
            "description": "Group description",
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "icon": {
            "description": "Group icon",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          },
          "users": {
            "description": "Array of user IDs to add to the group\n\nMust be friends with these users.",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 49,
            "minItems": 0,
            "uniqueItems": true
          },
          "nsfw": {
            "description": "Whether this group is age-restricted",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "LegacyCreateVoiceUserResponse": {
        "description": "Voice server token response",
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Token for authenticating with the voice server",
            "type": "string"
          }
        }
      },
      "DataSetRolePermissions": {
        "description": "New role permissions",
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "description": "Allow / deny values to set for this role",
            "allOf": [
              {
                "$ref": "#/components/schemas/Override"
              }
            ]
          }
        }
      },
      "Override": {
        "description": "Representation of a single permission override",
        "type": "object",
        "required": [
          "allow",
          "deny"
        ],
        "properties": {
          "allow": {
            "description": "Allow bit flags",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "deny": {
            "description": "Disallow bit flags",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        }
      },
      "DataDefaultChannelPermissions": {
        "description": "New default permissions",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "permissions"
            ],
            "properties": {
              "permissions": {
                "description": "Permission values to set for members in a `Group`",
                "type": "integer",
                "format": "uint64",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permissions"
            ],
            "properties": {
              "permissions": {
                "description": "Allow / deny values to set for members in this `TextChannel` or `VoiceChannel`",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Override"
                  }
                ]
              }
            }
          }
        ]
      },
      "Webhook": {
        "description": "Webhook",
        "type": "object",
        "required": [
          "channel_id",
          "creator_id",
          "id",
          "name",
          "permissions"
        ],
        "properties": {
          "id": {
            "description": "Webhook Id",
            "type": "string"
          },
          "name": {
            "description": "The name of the webhook",
            "type": "string"
          },
          "avatar": {
            "description": "The avatar of the webhook",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          },
          "creator_id": {
            "description": "User that created this webhook",
            "type": "string"
          },
          "channel_id": {
            "description": "The channel this webhook belongs to",
            "type": "string"
          },
          "permissions": {
            "description": "The permissions for the webhook",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "token": {
            "description": "The private token for the webhook",
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateWebhookBody": {
        "description": "Information for the webhook",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "avatar": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          }
        }
      },
      "CreateServerLegacyResponse": {
        "description": "Information returned when creating server",
        "type": "object",
        "required": [
          "channels",
          "server"
        ],
        "properties": {
          "server": {
            "description": "Server object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          },
          "channels": {
            "description": "Default channels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          }
        }
      },
      "Server": {
        "description": "Server",
        "type": "object",
        "required": [
          "_id",
          "channels",
          "default_permissions",
          "name",
          "owner"
        ],
        "properties": {
          "_id": {
            "description": "Unique Id",
            "type": "string"
          },
          "owner": {
            "description": "User id of the owner",
            "type": "string"
          },
          "name": {
            "description": "Name of the server",
            "type": "string"
          },
          "description": {
            "description": "Description for the server",
            "type": "string",
            "nullable": true
          },
          "channels": {
            "description": "Channels within this server",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "description": "Categories for this server",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "nullable": true
          },
          "system_messages": {
            "description": "Configuration for sending system event messages",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemMessageChannels"
              }
            ],
            "type": "null"
          },
          "roles": {
            "description": "Roles for this server",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Role"
            },
            "properties": {}
          },
          "default_permissions": {
            "description": "Default set of server and channel permissions",
            "type": "integer",
            "format": "int64"
          },
          "icon": {
            "description": "Icon attachment",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          },
          "banner": {
            "description": "Banner attachment",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          },
          "flags": {
            "description": "Bitfield of server flags",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "nsfw": {
            "description": "Whether this server is flagged as not safe for work",
            "type": "boolean"
          },
          "analytics": {
            "description": "Whether to enable analytics",
            "type": "boolean"
          },
          "discoverable": {
            "description": "Whether this server should be publicly discoverable",
            "type": "boolean"
          }
        }
      },
      "SystemMessageChannels": {
        "description": "System message channel assignments",
        "type": "object",
        "properties": {
          "user_joined": {
            "description": "ID of channel to send user join messages in",
            "type": "string",
            "nullable": true
          },
          "user_left": {
            "description": "ID of channel to send user left messages in",
            "type": "string",
            "nullable": true
          },
          "user_kicked": {
            "description": "ID of channel to send user kicked messages in",
            "type": "string",
            "nullable": true
          },
          "user_banned": {
            "description": "ID of channel to send user banned messages in",
            "type": "string",
            "nullable": true
          }
        }
      },
      "Role": {
        "description": "Role",
        "type": "object",
        "required": [
          "name",
          "permissions"
        ],
        "properties": {
          "name": {
            "description": "Role name",
            "type": "string"
          },
          "permissions": {
            "description": "Permissions available to this role",
            "allOf": [
              {
                "$ref": "#/components/schemas/OverrideField"
              }
            ]
          },
          "colour": {
            "description": "Colour used for this role\n\nThis can be any valid CSS colour",
            "type": "string",
            "nullable": true
          },
          "hoist": {
            "description": "Whether this role should be shown separately on the member sidebar",
            "type": "boolean"
          },
          "rank": {
            "description": "Ranking of this role",
            "default": 0,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DataCreateServer": {
        "description": "Information about new server to create",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Server name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "description": {
            "description": "Server description",
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "nsfw": {
            "description": "Whether this server is age-restricted",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "FetchServerResponse": {
        "description": "Fetch server information",
        "anyOf": [
          {
            "$ref": "#/components/schemas/Server"
          },
          {
            "description": "Server",
            "type": "object",
            "required": [
              "_id",
              "channels",
              "default_permissions",
              "name",
              "owner"
            ],
            "properties": {
              "channels": {
                "description": "Channels within this server",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "owner": {
                "description": "User id of the owner",
                "type": "string"
              },
              "name": {
                "description": "Name of the server",
                "type": "string"
              },
              "description": {
                "description": "Description for the server",
                "type": "string",
                "nullable": true
              },
              "categories": {
                "description": "Categories for this server",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Category"
                },
                "nullable": true
              },
              "system_messages": {
                "description": "Configuration for sending system event messages",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SystemMessageChannels"
                  }
                ],
                "type": "null"
              },
              "roles": {
                "description": "Roles for this server",
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "default_permissions": {
                "description": "Default set of server and channel permissions",
                "type": "integer",
                "format": "int64"
              },
              "icon": {
                "description": "Icon attachment",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "banner": {
                "description": "Banner attachment",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "flags": {
                "description": "Bitfield of server flags",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "nsfw": {
                "description": "Whether this server is flagged as not safe for work",
                "type": "boolean"
              },
              "analytics": {
                "description": "Whether to enable analytics",
                "type": "boolean"
              },
              "discoverable": {
                "description": "Whether this server should be publicly discoverable",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DataEditServer": {
        "description": "New server information",
        "type": "object",
        "properties": {
          "name": {
            "description": "Server name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true
          },
          "description": {
            "description": "Server description",
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "icon": {
            "description": "Attachment Id for icon",
            "type": "string",
            "nullable": true
          },
          "banner": {
            "description": "Attachment Id for banner",
            "type": "string",
            "nullable": true
          },
          "categories": {
            "description": "Category structure for server",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            },
            "nullable": true
          },
          "system_messages": {
            "description": "System message configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemMessageChannels"
              }
            ],
            "type": "null"
          },
          "flags": {
            "description": "Bitfield of server flags",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discoverable": {
            "description": "Whether this server is public and should show up on [Revolt Discover](https://rvlt.gg)",
            "type": "boolean",
            "nullable": true
          },
          "analytics": {
            "description": "Whether analytics should be collected for this server\n\nMust be enabled in order to show up on [Revolt Discover](https://rvlt.gg).",
            "type": "boolean",
            "nullable": true
          },
          "remove": {
            "description": "Fields to remove from server object",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsServer"
            },
            "minItems": 1,
            "nullable": true
          }
        }
      },
      "FieldsServer": {
        "description": "Optional fields on server object",
        "type": "string",
        "enum": [
          "Description",
          "Categories",
          "SystemMessages",
          "Icon",
          "Banner"
        ]
      },
      "DataCreateServerChannel": {
        "description": "Create new server channel",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "type": {
            "description": "Channel type",
            "default": "Text",
            "allOf": [
              {
                "$ref": "#/components/schemas/LegacyServerChannelType"
              }
            ]
          },
          "name": {
            "description": "Channel name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "description": {
            "description": "Channel description",
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "nsfw": {
            "description": "Whether this channel is age restricted",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "LegacyServerChannelType": {
        "description": "Server Channel Type",
        "type": "string",
        "enum": [
          "Text",
          "Voice"
        ]
      },
      "AllMemberResponse": {
        "description": "Response with all members",
        "type": "object",
        "required": [
          "members",
          "users"
        ],
        "properties": {
          "members": {
            "description": "List of members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "users": {
            "description": "List of users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "MemberResponse": {
        "description": "Member response",
        "anyOf": [
          {
            "$ref": "#/components/schemas/Member"
          },
          {
            "type": "object",
            "required": [
              "member",
              "roles"
            ],
            "properties": {
              "member": {
                "$ref": "#/components/schemas/Member"
              },
              "roles": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        ]
      },
      "DataMemberEdit": {
        "description": "New member information",
        "type": "object",
        "properties": {
          "nickname": {
            "description": "Member nickname",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true
          },
          "avatar": {
            "description": "Attachment Id to set for avatar",
            "type": "string",
            "nullable": true
          },
          "roles": {
            "description": "Array of role ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "timeout": {
            "description": "Timestamp this member is timed out until",
            "allOf": [
              {
                "$ref": "#/components/schemas/ISO8601%20Timestamp"
              }
            ],
            "type": "null"
          },
          "remove": {
            "description": "Fields to remove from channel object",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsMember"
            },
            "minItems": 1,
            "nullable": true
          }
        }
      },
      "FieldsMember": {
        "description": "Optional fields on server member object",
        "type": "string",
        "enum": [
          "Nickname",
          "Avatar",
          "Roles",
          "Timeout"
        ]
      },
      "MemberQueryResponse": {
        "title": "Query members by name",
        "type": "object",
        "required": [
          "members",
          "users"
        ],
        "properties": {
          "members": {
            "description": "List of members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "users": {
            "description": "List of users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "ServerBan": {
        "description": "Server Ban",
        "type": "object",
        "required": [
          "_id"
        ],
        "properties": {
          "_id": {
            "description": "Unique member id",
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberCompositeKey"
              }
            ]
          },
          "reason": {
            "description": "Reason for ban creation",
            "type": "string",
            "nullable": true
          }
        }
      },
      "DataBanCreate": {
        "description": "Information for new server ban",
        "type": "object",
        "properties": {
          "reason": {
            "description": "Ban reason",
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "BanListResult": {
        "description": "Ban list result",
        "type": "object",
        "required": [
          "bans",
          "users"
        ],
        "properties": {
          "users": {
            "description": "Users objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BannedUser"
            }
          },
          "bans": {
            "description": "Ban objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerBan"
            }
          }
        }
      },
      "BannedUser": {
        "description": "Just enough information to list a ban",
        "type": "object",
        "required": [
          "_id",
          "discriminator",
          "username"
        ],
        "properties": {
          "_id": {
            "description": "Id of the banned user",
            "type": "string"
          },
          "username": {
            "description": "Username of the banned user",
            "type": "string"
          },
          "discriminator": {
            "description": "Discriminator of the banned user",
            "type": "string"
          },
          "avatar": {
            "description": "Avatar of the banned user",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              }
            ],
            "type": "null"
          }
        }
      },
      "NewRoleResponse": {
        "description": "Response after creating new role",
        "type": "object",
        "required": [
          "id",
          "role"
        ],
        "properties": {
          "id": {
            "description": "Id of the role",
            "type": "string"
          },
          "role": {
            "description": "New role",
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          }
        }
      },
      "DataCreateRole": {
        "description": "Information about new role to create",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Role name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "rank": {
            "description": "Ranking position\n\nSmaller values take priority.",
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "DataEditRole": {
        "description": "New role information",
        "type": "object",
        "properties": {
          "name": {
            "description": "Role name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true
          },
          "colour": {
            "description": "Role colour",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "pattern": "(?i)^(?:[a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+|(repeating-)?(linear|conic|radial)-gradient\\(([a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+|\\d+deg)([ ]+(\\d{1,3}%|0))?(,[ ]*([a-z ]+|var\\(--[a-z\\d-]+\\)|rgba?\\([\\d, ]+\\)|#[a-f0-9]+)([ ]+(\\d{1,3}%|0))?)+\\))$",
            "nullable": true
          },
          "hoist": {
            "description": "Whether this role should be displayed separately",
            "type": "boolean",
            "nullable": true
          },
          "rank": {
            "description": "Ranking position\n\nSmaller values take priority.",
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "remove": {
            "description": "Fields to remove from role object",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsRole"
            },
            "minItems": 1,
            "nullable": true
          }
        }
      },
      "FieldsRole": {
        "description": "Optional fields on server object",
        "type": "string",
        "enum": [
          "Colour"
        ]
      },
      "DataSetServerRolePermission": {
        "description": "New role permissions",
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "description": "Allow / deny values for the role in this server.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Override"
              }
            ]
          }
        }
      },
      "DataPermissionsValue": {
        "description": "Data permissions Value - contains allow",
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        }
      },
      "Emoji": {
        "description": "Emoji",
        "type": "object",
        "required": [
          "_id",
          "creator_id",
          "name",
          "parent"
        ],
        "properties": {
          "_id": {
            "description": "Unique Id",
            "type": "string"
          },
          "parent": {
            "description": "What owns this emoji",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmojiParent"
              }
            ]
          },
          "creator_id": {
            "description": "Uploader user id",
            "type": "string"
          },
          "name": {
            "description": "Emoji name",
            "type": "string"
          },
          "animated": {
            "description": "Whether the emoji is animated",
            "type": "boolean"
          },
          "nsfw": {
            "description": "Whether the emoji is marked as nsfw",
            "type": "boolean"
          }
        }
      },
      "EmojiParent": {
        "description": "Parent Id of the emoji",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Server"
                ]
              },
              "id": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Detached"
                ]
              }
            }
          }
        ]
      },
      "InviteResponse": {
        "description": "Public invite response",
        "oneOf": [
          {
            "description": "Server channel invite",
            "type": "object",
            "required": [
              "channel_id",
              "channel_name",
              "code",
              "member_count",
              "server_id",
              "server_name",
              "type",
              "user_name"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Server"
                ]
              },
              "code": {
                "description": "Invite code",
                "type": "string"
              },
              "server_id": {
                "description": "Id of the server",
                "type": "string"
              },
              "server_name": {
                "description": "Name of the server",
                "type": "string"
              },
              "server_icon": {
                "description": "Attachment for server icon",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "server_banner": {
                "description": "Attachment for server banner",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "server_flags": {
                "description": "Enum of server flags",
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "channel_id": {
                "description": "Id of server channel",
                "type": "string"
              },
              "channel_name": {
                "description": "Name of server channel",
                "type": "string"
              },
              "channel_description": {
                "description": "Description of server channel",
                "type": "string",
                "nullable": true
              },
              "user_name": {
                "description": "Name of user who created the invite",
                "type": "string"
              },
              "user_avatar": {
                "description": "Avatar of the user who created the invite",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              },
              "member_count": {
                "description": "Number of members in this server",
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "Group channel invite",
            "type": "object",
            "required": [
              "channel_id",
              "channel_name",
              "code",
              "type",
              "user_name"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Group"
                ]
              },
              "code": {
                "description": "Invite code",
                "type": "string"
              },
              "channel_id": {
                "description": "Id of group channel",
                "type": "string"
              },
              "channel_name": {
                "description": "Name of group channel",
                "type": "string"
              },
              "channel_description": {
                "description": "Description of group channel",
                "type": "string",
                "nullable": true
              },
              "user_name": {
                "description": "Name of user who created the invite",
                "type": "string"
              },
              "user_avatar": {
                "description": "Avatar of the user who created the invite",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  }
                ],
                "type": "null"
              }
            }
          }
        ]
      },
      "InviteJoinResponse": {
        "description": "Invite join response",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "channels",
              "server",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Server"
                ]
              },
              "channels": {
                "description": "Channels in the server",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "server": {
                "description": "Server we are joining",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Server"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "channel",
              "type",
              "users"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Group"
                ]
              },
              "channel": {
                "description": "Group channel we are joining",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Channel"
                  }
                ]
              },
              "users": {
                "description": "Members of this group",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        ]
      },
      "DataCreateEmoji": {
        "description": "Create a new emoji",
        "type": "object",
        "required": [
          "name",
          "parent"
        ],
        "properties": {
          "name": {
            "description": "Server name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-z0-9_]+$"
          },
          "parent": {
            "description": "Parent information",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmojiParent"
              }
            ]
          },
          "nsfw": {
            "description": "Whether the emoji is mature",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "DataReportContent": {
        "title": "Report Data",
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "description": "Content being reported",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReportedContent"
              }
            ]
          },
          "additional_context": {
            "description": "Additional report description",
            "default": "",
            "type": "string",
            "maxLength": 1000,
            "minLength": 0
          }
        }
      },
      "ReportedContent": {
        "description": "The content being reported",
        "oneOf": [
          {
            "description": "Report a message",
            "type": "object",
            "required": [
              "id",
              "report_reason",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Message"
                ]
              },
              "id": {
                "description": "ID of the message",
                "type": "string"
              },
              "report_reason": {
                "description": "Reason for reporting message",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContentReportReason"
                  }
                ]
              }
            }
          },
          {
            "description": "Report a server",
            "type": "object",
            "required": [
              "id",
              "report_reason",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Server"
                ]
              },
              "id": {
                "description": "ID of the server",
                "type": "string"
              },
              "report_reason": {
                "description": "Reason for reporting server",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContentReportReason"
                  }
                ]
              }
            }
          },
          {
            "description": "Report a user",
            "type": "object",
            "required": [
              "id",
              "report_reason",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "User"
                ]
              },
              "id": {
                "description": "ID of the user",
                "type": "string"
              },
              "report_reason": {
                "description": "Reason for reporting a user",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserReportReason"
                  }
                ]
              },
              "message_id": {
                "description": "Message context",
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentReportReason": {
        "description": "Reason for reporting content (message or server)",
        "type": "string",
        "enum": [
          "NoneSpecified",
          "Illegal",
          "IllegalGoods",
          "IllegalExtortion",
          "IllegalPornography",
          "IllegalHacking",
          "ExtremeViolence",
          "PromotesHarm",
          "UnsolicitedSpam",
          "Raid",
          "SpamAbuse",
          "ScamsFraud",
          "Malware",
          "Harassment"
        ]
      },
      "UserReportReason": {
        "description": "Reason for reporting a user",
        "type": "string",
        "enum": [
          "NoneSpecified",
          "UnsolicitedSpam",
          "SpamAbuse",
          "InappropriateProfile",
          "Impersonation",
          "BanEvasion",
          "Underage"
        ]
      },
      "Authifier Error": {
        "title": "Error",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "with"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "IncorrectData"
                ]
              },
              "with": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "operation",
              "type",
              "with"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DatabaseError"
                ]
              },
              "operation": {
                "type": "string"
              },
              "with": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InternalError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "OperationFailed"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "RenderFail"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "MissingHeaders"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CaptchaFailed"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "BlockedByShield"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidSession"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnverifiedAccount"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UnknownUser"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "EmailFailed"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidToken"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "MissingInvite"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidInvite"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "InvalidCredentials"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "CompromisedPassword"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ShortPassword"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Blacklisted"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "LockedOut"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TotpAlreadyEnabled"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DisallowedMFAMethod"
                ]
              }
            }
          }
        ]
      },
      "DataCreateAccount": {
        "title": "Account Data",
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "Valid email address",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "invite": {
            "description": "Invite code",
            "type": "string",
            "nullable": true
          },
          "captcha": {
            "description": "Captcha verification code",
            "type": "string",
            "nullable": true
          }
        }
      },
      "DataResendVerification": {
        "title": "Resend Information",
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "Email associated with the account",
            "type": "string"
          },
          "captcha": {
            "description": "Captcha verification code",
            "type": "string",
            "nullable": true
          }
        }
      },
      "DataAccountDeletion": {
        "title": "Account Deletion Token",
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Deletion token",
            "type": "string"
          }
        }
      },
      "AccountInfo": {
        "type": "object",
        "required": [
          "_id",
          "email"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "DataChangePassword": {
        "title": "Change Data",
        "type": "object",
        "required": [
          "current_password",
          "password"
        ],
        "properties": {
          "password": {
            "description": "New password",
            "type": "string"
          },
          "current_password": {
            "description": "Current password",
            "type": "string"
          }
        }
      },
      "DataChangeEmail": {
        "title": "Change Data",
        "type": "object",
        "required": [
          "current_password",
          "email"
        ],
        "properties": {
          "email": {
            "description": "Valid email address",
            "type": "string"
          },
          "current_password": {
            "description": "Current password",
            "type": "string"
          }
        }
      },
      "ResponseVerify": {
        "anyOf": [
          {
            "type": "null"
          },
          {
            "type": "object",
            "required": [
              "ticket"
            ],
            "properties": {
              "ticket": {
                "description": "Authorised MFA ticket, can be used to log in",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MFATicket"
                  }
                ]
              }
            }
          }
        ]
      },
      "MFATicket": {
        "description": "Multi-factor auth ticket",
        "type": "object",
        "required": [
          "_id",
          "account_id",
          "authorised",
          "token",
          "validated"
        ],
        "properties": {
          "_id": {
            "description": "Unique Id",
            "type": "string"
          },
          "account_id": {
            "description": "Account Id",
            "type": "string"
          },
          "token": {
            "description": "Unique Token",
            "type": "string"
          },
          "validated": {
            "description": "Whether this ticket has been validated (can be used for account actions)",
            "type": "boolean"
          },
          "authorised": {
            "description": "Whether this ticket is authorised (can be used to log a user in)",
            "type": "boolean"
          },
          "last_totp_code": {
            "description": "TOTP code at time of ticket creation",
            "type": "string",
            "nullable": true
          }
        }
      },
      "DataPasswordReset": {
        "title": "Password Reset",
        "type": "object",
        "required": [
          "password",
          "token"
        ],
        "properties": {
          "token": {
            "description": "Reset token",
            "type": "string"
          },
          "password": {
            "description": "New password",
            "type": "string"
          },
          "remove_sessions": {
            "description": "Whether to logout all sessions",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "DataSendPasswordReset": {
        "title": "Reset Information",
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "Email associated with the account",
            "type": "string"
          },
          "captcha": {
            "description": "Captcha verification code",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseLogin": {
        "oneOf": [
          {
            "description": "Session information",
            "type": "object",
            "required": [
              "_id",
              "name",
              "result",
              "token",
              "user_id"
            ],
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "Success"
                ]
              },
              "_id": {
                "description": "Unique Id",
                "type": "string"
              },
              "user_id": {
                "description": "User Id",
                "type": "string"
              },
              "token": {
                "description": "Session token",
                "type": "string"
              },
              "name": {
                "description": "Display name",
                "type": "string"
              },
              "subscription": {
                "description": "Web Push subscription",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebPushSubscription"
                  }
                ],
                "type": "null"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "allowed_methods",
              "result",
              "ticket"
            ],
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "MFA"
                ]
              },
              "ticket": {
                "type": "string"
              },
              "allowed_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MFAMethod"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "result",
              "user_id"
            ],
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "Disabled"
                ]
              },
              "user_id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WebPushSubscription": {
        "description": "Web Push subscription",
        "type": "object",
        "required": [
          "auth",
          "endpoint",
          "p256dh"
        ],
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "p256dh": {
            "type": "string"
          },
          "auth": {
            "type": "string"
          }
        }
      },
      "MFAMethod": {
        "description": "MFA method",
        "type": "string",
        "enum": [
          "Password",
          "Recovery",
          "Totp"
        ]
      },
      "DataLogin": {
        "title": "Login Data",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "email",
              "password"
            ],
            "properties": {
              "email": {
                "description": "Email",
                "type": "string"
              },
              "password": {
                "description": "Password",
                "type": "string"
              },
              "friendly_name": {
                "description": "Friendly name used for the session",
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mfa_ticket"
            ],
            "properties": {
              "mfa_ticket": {
                "description": "Unvalidated or authorised MFA ticket\n\nUsed to resolve the correct account",
                "type": "string"
              },
              "mfa_response": {
                "description": "Valid MFA response\n\nThis will take precedence over the `password` field where applicable",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MFAResponse"
                  }
                ],
                "type": "null"
              },
              "friendly_name": {
                "description": "Friendly name used for the session",
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "MFAResponse": {
        "description": "MFA response",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "password"
            ],
            "properties": {
              "password": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "recovery_code"
            ],
            "properties": {
              "recovery_code": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "totp_code"
            ],
            "properties": {
              "totp_code": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SessionInfo": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DataEditSession": {
        "title": "Edit Data",
        "type": "object",
        "required": [
          "friendly_name"
        ],
        "properties": {
          "friendly_name": {
            "description": "Session friendly name",
            "type": "string"
          }
        }
      },
      "MultiFactorStatus": {
        "type": "object",
        "required": [
          "email_mfa",
          "email_otp",
          "recovery_active",
          "security_key_mfa",
          "totp_mfa",
          "trusted_handover"
        ],
        "properties": {
          "email_otp": {
            "type": "boolean"
          },
          "trusted_handover": {
            "type": "boolean"
          },
          "email_mfa": {
            "type": "boolean"
          },
          "totp_mfa": {
            "type": "boolean"
          },
          "security_key_mfa": {
            "type": "boolean"
          },
          "recovery_active": {
            "type": "boolean"
          }
        }
      },
      "ResponseTotpSecret": {
        "title": "Totp Secret",
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          }
        }
      },
      "DataHello": {
        "title": "Onboarding Status",
        "type": "object",
        "required": [
          "onboarding"
        ],
        "properties": {
          "onboarding": {
            "description": "Whether onboarding is required",
            "type": "boolean"
          }
        }
      },
      "DataOnboard": {
        "title": "New User Data",
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "description": "New username which will be used to identify the user on the platform",
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^(\\p{L}|[\\d_.-])+$"
          }
        }
      },
      "OptionsFetchSettings": {
        "description": "Options for fetching settings",
        "type": "object",
        "required": [
          "keys"
        ],
        "properties": {
          "keys": {
            "description": "Keys to fetch",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChannelUnread": {
        "description": "Channel Unread",
        "type": "object",
        "required": [
          "_id"
        ],
        "properties": {
          "_id": {
            "description": "Composite key pointing to a user's view of a channel",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCompositeKey"
              }
            ]
          },
          "last_id": {
            "description": "Id of the last message read in this channel by a user",
            "type": "string",
            "nullable": true
          },
          "mentions": {
            "description": "Array of message ids that mention the user",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChannelCompositeKey": {
        "description": "Composite primary key consisting of channel and user id",
        "type": "object",
        "required": [
          "channel",
          "user"
        ],
        "properties": {
          "channel": {
            "description": "Channel Id",
            "type": "string"
          },
          "user": {
            "description": "User Id",
            "type": "string"
          }
        }
      },
      "DataEditWebhook": {
        "description": "New webhook information",
        "type": "object",
        "properties": {
          "name": {
            "description": "Webhook name",
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "nullable": true
          },
          "avatar": {
            "description": "Avatar ID",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true
          },
          "permissions": {
            "description": "Webhook permissions",
            "type": "integer",
            "format": "uint64",
            "minimum": 0,
            "nullable": true
          },
          "remove": {
            "description": "Fields to remove from webhook",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldsWebhook"
            }
          }
        }
      },
      "FieldsWebhook": {
        "description": "Optional fields on webhook object",
        "type": "string",
        "enum": [
          "Avatar"
        ]
      },
      "ResponseWebhook": {
        "description": "Webhook information",
        "type": "object",
        "required": [
          "channel_id",
          "id",
          "name",
          "permissions"
        ],
        "properties": {
          "id": {
            "description": "Webhook Id",
            "type": "string"
          },
          "name": {
            "description": "Webhook name",
            "type": "string"
          },
          "avatar": {
            "description": "Avatar ID",
            "type": "string",
            "nullable": true
          },
          "channel_id": {
            "description": "The channel this webhook belongs to",
            "type": "string"
          },
          "permissions": {
            "description": "The permissions for the webhook",
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        }
      }
    },
    "securitySchemes": {}
  },
  "servers": [],
  "security": []
}